import Music from "../models/music.model.js";
import Order from "../models/order.model.js";
import { errorHandler } from "../utils/error.js";
import mongoose from "mongoose";

export const createMusic = async (req, res, next) => {
  try {
    const { title, description, category, music } = req.body;

    if (!title || !description || !music) {
      return next(errorHandler(400, "Please provide all required fields"));
    }

    // Create the music document - slug will be generated by pre-save hook
    const newMusic = new Music({
      title,
      description,
      category: category || "uncategorized",
      music,
      image: req.body.image || "https://i0.wp.com/woodwoon.com/wp-content/uploads/2023/01/SOS0002-sofa-set-sofa-design-furniture-store-in-pakistan.webp?fit=1024%2C787&ssl=1",
    });

    const savedMusic = await newMusic.save();
    res.status(201).json(savedMusic);
  } catch (error) {
    if (error.code === 11000) {
      // Handle duplicate key errors
      if (error.keyPattern.title) {
        return next(errorHandler(400, "A music with this title already exists"));
      }
      if (error.keyPattern.slug) {
        return next(errorHandler(400, "Could not generate a unique slug. Please try again."));
      }
    }
    next(error);
  }
};

export const getAllMusic = async (req, res, next) => {
  try {
    const { searchTerm = "", page = 1, limit = 10 } = req.query;
    const query = searchTerm
      ? { title: { $regex: searchTerm, $options: "i" } }
      : {};

    // Convert to numbers
    const pageNum = parseInt(page);
    const limitNum = parseInt(limit);
    const skip = (pageNum - 1) * limitNum;

    // Get total count
    const totalMusic = await Music.countDocuments(query);

    // Calculate first and last day of last month for statistics
    const firstDayLastMonth = new Date();
    firstDayLastMonth.setDate(1);
    firstDayLastMonth.setMonth(firstDayLastMonth.getMonth() - 1);
    firstDayLastMonth.setHours(0, 0, 0, 0);

    const lastDayLastMonth = new Date();
    lastDayLastMonth.setDate(0);
    lastDayLastMonth.setHours(23, 59, 59, 999);

    const lastMonthMusic = await Music.countDocuments({
      ...query,
      updatedAt: { $gte: firstDayLastMonth, $lte: lastDayLastMonth },
    });

    // Get paginated results
    const music = await Music.find(query)
      .skip(skip)
      .limit(limitNum);

    res.status(200).json({
      music,
      totalMusic,
      lastMonthMusic,
      currentPage: pageNum,
      totalPages: Math.ceil(totalMusic / limitNum),
    });
  } catch (error) {
    next(error);
  }
};

export const getMusicById = async (req, res, next) => {
  try {
    const { musicId } = req.params;
    // Fetch the music by ID
    const music = await Music.findById(musicId);

    // Check if music exists
    if (!music) {
      return next(errorHandler(404, "Music not found"));
    }

    res.status(200).json(music);
  } catch (error) {
    next(error);
  }
};

export const updateMusic = async (req, res, next) => {
  try {
    const updatedMusic = await Music.findByIdAndUpdate(
      req.params.musicId,
      {
        $set: {
          title: req.body.title,
          description: req.body.description,
          category: req.body.category,
          image: req.body.image,
          music: req.body.music,
        },
      },
      { new: true }
    );
    if (!updatedMusic) {
      return next(errorHandler(404, "Music not found"));
    }
    res.status(200).json(updatedMusic);
  } catch (error) {
    next(error);
  }
};

export const deleteMusic = async (req, res, next) => {
  try {
    await Music.findByIdAndDelete(req.params.musicId);
    res.status(200).json("The product has been deleted");
  } catch (error) {
    next(error);
  }
};

export const getMusicByCategory = async (req, res, next) => {
  try {
    const { category } = req.query;
    const userId = req.user?.id;

    if (!category) {
      return res.status(400).json({ message: "Category is required" });
    }

    const music = await Music.find({ category });

    // Add isFavorited flag if user is logged in
    if (userId) {
      const user = await User.findById(userId);
      const favoriteIds = user?.favorites || [];
      const musicWithFavorites = music.map((m) => ({
        ...m._doc,
        isFavorited: favoriteIds.includes(m._id.toString()),
      }));
      return res.status(200).json({ music: musicWithFavorites });
    }

    res.status(200).json({ music });
  } catch (error) {
    next(error);
  }
};
